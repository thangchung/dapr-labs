package docs:calculator@0.1.0

interface calculate {
    enum op {
        add,
    }
    eval-expression: func(op: op, x: u32, y: u32) -> u32
}

interface add {
  add: func(a: u32, b: u32) -> u32 
}

interface inbound-http {
   type http-status = u16

   type body = list<u8>

   type headers = list<tuple<string, string>>

   type params = list<tuple<string, string>>

   type uri = string

    enum method {
        get,
        post,
        put,
        delete,
        patch,
        head,
        options,
    }

    record request {
        method: method,
        uri: uri,
        headers: headers,
        params: params,
        body: option<body>,
    }

    record response {
        status: http-status,
        headers: option<headers>,
        body: option<body>,
    }

    enum http-error {
        success,
        destination-not-allowed,
        invalid-url,
        request-error,
        runtime-error,
        too-many-requests,
    }

    handle-request: func(req: request) -> response
}

world adder {
    export add
}

world calculator {
    export calculate
    import add
}

world app {
    import calculate
}
